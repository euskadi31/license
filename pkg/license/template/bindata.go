// Code generated by go-bindata.
// sources:
// licenses/MIT.tpl
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _licensesMitTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x3e\xe4\xb4\x0b\x10\xe9\xbd\x37\x46\xa2\x2d\xa2\x32\x69\x50\xf4\xba\x3e\xd2\x12\x1d\xb1\x90\x45\x43\xa4\x1b\x04\x0b\xbf\x7b\x31\xb2\x37\x49\xf7\x24\x81\x33\xdf\xef\x94\xf1\xf2\x3e\x87\xd7\x21\xe3\x5b\xf7\x1d\x3f\x7f\x3e\x1f\xbc\x9b\x6f\x37\xfa\xfb\x18\xd5\x71\xec\xfd\x9c\x6e\xb7\xa2\xd8\xfa\xf9\x1c\x52\x0a\x71\x42\x48\x18\xfc\xec\x8f\xef\x78\x9d\xdd\x94\x7d\xcf\x70\x9a\xbd\x47\x3c\xa1\x1b\xdc\xfc\xea\x19\x72\x84\x9b\xde\x71\xf1\x73\x8a\x13\xe2\x31\xbb\x30\x85\xe9\x15\x0e\x5d\xbc\xbc\xd3\x66\x1e\x42\x42\x8a\xa7\xfc\xe6\x66\x0f\x37\xf5\x85\x4b\x29\x76\xc1\x65\xdf\xa3\x8f\xdd\xf5\xec\xa7\xec\x32\xe9\x9d\xc2\xe8\x13\xbe\xe5\xc1\xe3\xa9\x7d\x20\x9e\xbe\x2f\x22\xbd\x77\x23\xc2\x04\x9a\xfd\x1a\xe1\x2d\xe4\x21\x5e\x33\x66\x9f\xf2\x1c\x3a\xe2\x60\x45\x98\xba\xf1\xda\x93\x87\x5f\xe3\x31\x9c\xc3\x43\x81\xe0\x4b\xe0\x44\xa4\xd7\xe4\xd9\xe2\x93\xe1\x1c\xfb\x70\xa2\xaf\x5f\x62\x5d\xae\xc7\x31\xa4\x81\xa1\x0f\x44\x7d\xbc\x66\xcf\x90\xe8\xb1\xf3\x53\xf2\xac\x70\x53\xff\x47\x9c\x91\xfc\x38\x12\x43\xf0\xe9\x9e\xf5\xd3\x1d\xa3\xac\xa4\x72\xa1\x42\xf3\xa3\xa2\x45\xf7\x6d\x88\xe7\xff\x27\x09\x09\xa7\xeb\x3c\x85\x34\xf8\x05\xd3\x47\xa4\xc8\x8a\x74\x3d\xfe\xe3\xbb\x4c\x2f\xb4\x7e\x8a\xe3\x18\xdf\x28\x5a\x17\xa7\x3e\x50\xa2\xf4\x67\x51\xd8\xc1\xc3\x1d\xe3\xbf\x7e\xc9\x72\x3f\xf5\x14\x73\xe8\xfc\xdd\x02\x1d\xe0\xf2\x79\xd5\xc7\x28\x0d\x6e\x1c\x71\xf4\xb8\x17\xe6\x7b\xaa\xd7\x7d\x89\x33\x53\xe0\x94\xdd\x94\x83\x1b\x8b\x4b\x9c\x17\xbd\xdf\x63\x3e\x17\x85\xad\x05\x5a\xbd\xb2\x7b\x6e\x04\x64\x8b\xad\xd1\x3f\x64\x25\x2a\x3c\xf1\x16\xb2\x7d\x62\xd8\x4b\x5b\xeb\x9d\xc5\x9e\x1b\xc3\x95\x3d\x40\xaf\xc0\xd5\x01\x7f\x49\x55\x31\x88\xbf\xb7\x46\xb4\x2d\xb4\x81\xdc\x6c\x1b\x29\x2a\x06\xa9\xca\x66\x57\x49\xb5\xc6\xcb\xce\x42\x69\x5b\x34\x72\x23\xad\xa8\x60\x35\x48\xf0\x41\x25\x45\x4b\x64\x1b\x61\xca\x9a\x2b\xcb\x5f\x64\x23\xed\x81\x61\x25\xad\x22\xce\x95\x36\xe0\xd8\x72\x63\x65\xb9\x6b\xb8\xc1\x76\x67\xb6\xba\x15\xe0\xaa\x82\xd2\x4a\xaa\x95\x91\x6a\x2d\x36\x42\xd9\x67\x48\x55\x28\x0d\xf1\x43\x28\x8b\xb6\xe6\x4d\xb3\x48\xf1\x9d\xad\xb5\x59\xfc\x95\x7a\x7b\x30\x72\x5d\x5b\xd4\xba\xa9\x84\x69\xf1\x22\xd0\x48\xfe\xd2\x88\xbb\x94\x3a\xa0\x6c\xb8\xdc\x30\x54\x7c\xc3\xd7\x62\x41\x69\x5b\x0b\xb3\xac\xdd\xdd\x15\xfb\x5a\x2c\x4f\x52\x81\x2b\xf0\xd2\x4a\xad\x28\x46\xa9\x95\x35\xbc\xb4\x0c\x56\x1b\xfb\x01\xdd\xcb\x56\x30\x70\x23\x5b\x2a\x64\x65\xf4\x86\x81\xea\xd4\xab\xa5\x33\x45\x38\x25\xee\x2c\x54\x35\xb9\x2e\x3e\x2e\xa2\xcd\x92\x62\xd7\x8a\x4f\x2f\x95\xe0\x8d\x54\xeb\x96\xc0\x5f\xcf\xf7\x5c\xfc\x17\x00\x00\xff\xff\x16\x2a\xf3\x4b\x2e\x04\x00\x00")

func licensesMitTplBytes() ([]byte, error) {
	return bindataRead(
		_licensesMitTpl,
		"licenses/MIT.tpl",
	)
}

func licensesMitTpl() (*asset, error) {
	bytes, err := licensesMitTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "licenses/MIT.tpl", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1561163269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"licenses/MIT.tpl": licensesMitTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"licenses": &bintree{nil, map[string]*bintree{
		"MIT.tpl": &bintree{licensesMitTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

